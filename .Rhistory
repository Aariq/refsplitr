data$y<-data$lat
data$julian<-as.POSIXlt(data$date)$yday+1
# filter out by the maxdate (late in season), break from function if not (need to add a stop)
if(!any(data$julian<latedate)){return()}
maxday<-max(data$julian[data$julian<latedate])
# Have to calculate a 'relative date' since nesting days likely cross the new year (julian day 365 versus 0)
data$reljulian<-data$julian
data$reljulian[data$reljulian>year.start]<-data$reljulian[data$reljulian>year.start]-365
newjul<-data.frame(reljulian=min(data$reljulian):max(data$reljulian[data$reljulian<latedate]))
newjul$reldate<-1:nrow(newjul)
newjul$julian<-newjul$reljulian
newjul$julian[newjul$julian<0]<-newjul$julian[newjul$julian<0]+365
# create a sequential id
data<-data[order(data$date),]
data$seqid<-1:nrow(data)
#create unique location ids
### Create unique x,y combinations
#################################
xy<-as.factor(paste0(data$x,'_',data$y))
data$locid<-as.numeric(xy)
df1<-data.frame(xy=levels(xy))
df1$locid<-as.numeric(df1$xy)
df1$groupid<-df1$locid
df1$x<-sapply(strsplit(as.character(df1$xy),'_'),function(x)as.numeric(x[1]))
df1$y<-sapply(strsplit(as.character(df1$xy),'_'),function(x)as.numeric(x[2]))
f<-table(merge(raw.data[,c('long','lat','X')],df1[,c('x','y','locid')],by.x=c('long','lat'),by.y=c('x','y'),all.x=T)$locid)
f<-sort(f, decreasing=T)
df1<-merge(df1,data.frame(freq=c(f),locid=as.numeric(names(f))),by='locid',all.x=T)
library(Imap)
check.row<-nrow(df1)
dist.frame.full<-data.frame(first=rep(1:check.row,times=seq((check.row-1),0)),second=unlist(sapply(2:check.row,function(x) seq(x,check.row))))
dist.list<-list()
max.point<-1000000
print(i/ceiling(nrow(dist.frame.full)/max.point))
i<-1
min.row<-(i-1)*max.point + 1
max.row<- i*max.point
if(max.row>check.row){max.row<-check.row}
dist.frame<-dist.frame.full[min.row:max.row,]
max.row
ceiling(nrow(dist.frame.full)/max.point)
51*10014
i*max.point
max.row<- i*max.point
max.row
if(max.row>check.row){max.row<-nrow(dist.frame.full)}
nbigrow<-nrow(dist.frame.full)
i<-1
min.row<-(i-1)*max.point + 1
max.row<- i*max.point
if(max.row>nbigrow){max.row<-nbigrow}
dist.frame<-dist.frame.full[min.row:max.row,]
dist.frame[,c('x1','y1','id1')]<-merge(dist.frame[,'first',drop=F],df1[,c('locid','x','y')],by.x='first',by.y='locid',all.x=T)[,c('x','y','first')]
dist.frame[,c('x2','y2','id2')]<-merge(dist.frame[,'second',drop=F],df1[,c('locid','x','y')],by.x='second',by.y='locid',all.x=T)[,c('x','y','second')]
gg<-dist.frame[1:100,]
# attempt to lower the amount of important points by filtering points that are far away (HARD ESTIMATE)
dist.frame<-subset(dist.frame, abs(x1-x2)<0.01 & abs(y1-y2)<0.01)
if(nrow(dist.frame)>0){
dist.frame$dist<-gdist(dist.frame$x1, dist.frame$y1,dist.frame$x2, dist.frame$y2, 'm')
dist.frame<-dist.frame[dist.frame$dist<=buffer ,]
dist.list[[paste0(i)]]<-dist.frame
}
rm(dist.frame)
gc()
i<-2
min.row<-(i-1)*max.point + 1
max.row<- i*max.point
if(max.row>nbigrow){max.row<-nbigrow}
dist.frame<-dist.frame.full[min.row:max.row,]
dist.frame[,c('x1','y1','id1')]<-merge(dist.frame[,'first',drop=F],df1[,c('locid','x','y')],by.x='first',by.y='locid',all.x=T)[,c('x','y','first')]
dist.frame[,c('x2','y2','id2')]<-merge(dist.frame[,'second',drop=F],df1[,c('locid','x','y')],by.x='second',by.y='locid',all.x=T)[,c('x','y','second')]
gg<-dist.frame[1:100,]
# attempt to lower the amount of important points by filtering points that are far away (HARD ESTIMATE)
dist.frame<-subset(dist.frame, abs(x1-x2)<0.01 & abs(y1-y2)<0.01)
if(nrow(dist.frame)>0){
dist.frame$dist<-gdist(dist.frame$x1, dist.frame$y1,dist.frame$x2, dist.frame$y2, 'm')
dist.frame<-dist.frame[dist.frame$dist<=buffer ,]
dist.list[[paste0(i)]]<-dist.frame
}
rm(dist.frame)
gc()
rm(dist.frame)
gc()
print(i/ceiling(nrow(dist.frame.full)/max.point))
print(paste0(i,'/',ceiling(nrow(dist.frame.full)/max.point)))
dist.list<-list()
max.point<-1000000
for(i in 1:ceiling(nbigrow/max.point) ){
#i<-2
min.row<-(i-1)*max.point + 1
max.row<- i*max.point
if(max.row>nbigrow){max.row<-nbigrow}
#nrowD<-max.row-min.row + 1
dist.frame<-dist.frame.full[min.row:max.row,]
dist.frame[,c('x1','y1','id1')]<-merge(dist.frame[,'first',drop=F],df1[,c('locid','x','y')],by.x='first',by.y='locid',all.x=T)[,c('x','y','first')]
dist.frame[,c('x2','y2','id2')]<-merge(dist.frame[,'second',drop=F],df1[,c('locid','x','y')],by.x='second',by.y='locid',all.x=T)[,c('x','y','second')]
gg<-dist.frame[1:100,]
# attempt to lower the amount of important points by filtering points that are far away (HARD ESTIMATE)
dist.frame<-subset(dist.frame, abs(x1-x2)<0.01 & abs(y1-y2)<0.01)
if(nrow(dist.frame)>0){
dist.frame$dist<-gdist(dist.frame$x1, dist.frame$y1,dist.frame$x2, dist.frame$y2, 'm')
dist.frame<-dist.frame[dist.frame$dist<=buffer ,]
dist.list[[paste0(i)]]<-dist.frame
}
rm(dist.frame)
gc()
print(paste0(i,'/',ceiling(nrow(dist.frame.full)/max.point)))
}
##############################
# option
#############################
buffer<-40 #in meters
earlydate<-0 # earliest julian date to filter by
latedate<-365 # latest julian date to filter by
day.filter<-1 # How many points required to be taken per day to expect we catch a nesting event
day.threshold<-2 # consecutive days at location required
day.threshold.start<-1
daily.visit.threshold<-1 # amount of consecutive visits within a day required
max.visit.threshold<-1
percent.time.at.site.t<-1
resampleBuffer<-20
percent.max.visit.t<-1
year.start<-274
window_size<-120
StorkID<-"1134420-2013" #This is technically the 'burst' id.
raw.data<-read.csv('file:///C:/Users/birde/Downloads/MEGU_nesters.csv')
############################
StorkID<-unique(raw.data$burst)[5]
data<-subset(raw.data,burst==StorkID)
##############################
data$x<-data$long
data$y<-data$lat
data$julian<-as.POSIXlt(data$date)$yday+1
# filter out by the maxdate (late in season), break from function if not (need to add a stop)
if(!any(data$julian<latedate)){return()}
maxday<-max(data$julian[data$julian<latedate])
# Have to calculate a 'relative date' since nesting days likely cross the new year (julian day 365 versus 0)
data$reljulian<-data$julian
data$reljulian[data$reljulian>year.start]<-data$reljulian[data$reljulian>year.start]-365
newjul<-data.frame(reljulian=min(data$reljulian):max(data$reljulian[data$reljulian<latedate]))
newjul$reldate<-1:nrow(newjul)
newjul$julian<-newjul$reljulian
newjul$julian[newjul$julian<0]<-newjul$julian[newjul$julian<0]+365
# create a sequential id
data<-data[order(data$date),]
data$seqid<-1:nrow(data)
#create unique location ids
### Create unique x,y combinations
#################################
xy<-as.factor(paste0(data$x,'_',data$y))
data$locid<-as.numeric(xy)
df1<-data.frame(xy=levels(xy))
df1$locid<-as.numeric(df1$xy)
df1$groupid<-df1$locid
df1$x<-sapply(strsplit(as.character(df1$xy),'_'),function(x)as.numeric(x[1]))
df1$y<-sapply(strsplit(as.character(df1$xy),'_'),function(x)as.numeric(x[2]))
f<-table(merge(raw.data[,c('long','lat','X')],df1[,c('x','y','locid')],by.x=c('long','lat'),by.y=c('x','y'),all.x=T)$locid)
f<-sort(f, decreasing=T)
df1<-merge(df1,data.frame(freq=c(f),locid=as.numeric(names(f))),by='locid',all.x=T)
library(Imap)
check.row<-nrow(df1)
dist.frame.full<-data.frame(first=rep(1:check.row,times=seq((check.row-1),0)),second=unlist(sapply(2:check.row,function(x) seq(x,check.row))))
nbigrow<-nrow(dist.frame.full)
dist.list<-list()
max.point<-10000000
for(i in 1:ceiling(nbigrow/max.point) ){
#i<-2
min.row<-(i-1)*max.point + 1
max.row<- i*max.point
if(max.row>nbigrow){max.row<-nbigrow}
#nrowD<-max.row-min.row + 1
dist.frame<-dist.frame.full[min.row:max.row,]
dist.frame[,c('x1','y1','id1')]<-merge(dist.frame[,'first',drop=F],df1[,c('locid','x','y')],by.x='first',by.y='locid',all.x=T)[,c('x','y','first')]
dist.frame[,c('x2','y2','id2')]<-merge(dist.frame[,'second',drop=F],df1[,c('locid','x','y')],by.x='second',by.y='locid',all.x=T)[,c('x','y','second')]
gg<-dist.frame[1:100,]
# attempt to lower the amount of important points by filtering points that are far away (HARD ESTIMATE)
dist.frame<-subset(dist.frame, abs(x1-x2)<0.01 & abs(y1-y2)<0.01)
if(nrow(dist.frame)>0){
dist.frame$dist<-gdist(dist.frame$x1, dist.frame$y1,dist.frame$x2, dist.frame$y2, 'm')
dist.frame<-dist.frame[dist.frame$dist<=buffer ,]
dist.list[[paste0(i)]]<-dist.frame
}
rm(dist.frame)
gc()
print(paste0(i,'/',ceiling(nrow(dist.frame.full)/max.point)))
}
##############################
# option
#############################
buffer<-40 #in meters
earlydate<-0 # earliest julian date to filter by
latedate<-365 # latest julian date to filter by
day.filter<-1 # How many points required to be taken per day to expect we catch a nesting event
day.threshold<-2 # consecutive days at location required
day.threshold.start<-1
daily.visit.threshold<-1 # amount of consecutive visits within a day required
max.visit.threshold<-1
percent.time.at.site.t<-1
resampleBuffer<-20
percent.max.visit.t<-1
year.start<-274
window_size<-120
StorkID<-"1134420-2013" #This is technically the 'burst' id.
raw.data<-read.csv('file:///C:/Users/birde/Downloads/MEGU_nesters.csv')
############################
StorkID<-unique(raw.data$burst)[5]
# This function calculates the likely
data<-subset(raw.data,burst==StorkID)
##############################
data$x<-data$long
data$y<-data$lat
data$julian<-as.POSIXlt(data$date)$yday+1
# filter out by the maxdate (late in season), break from function if not (need to add a stop)
if(!any(data$julian<latedate)){return()}
maxday<-max(data$julian[data$julian<latedate])
# Have to calculate a 'relative date' since nesting days likely cross the new year (julian day 365 versus 0)
data$reljulian<-data$julian
data$reljulian[data$reljulian>year.start]<-data$reljulian[data$reljulian>year.start]-365
newjul<-data.frame(reljulian=min(data$reljulian):max(data$reljulian[data$reljulian<latedate]))
newjul$reldate<-1:nrow(newjul)
newjul$julian<-newjul$reljulian
newjul$julian[newjul$julian<0]<-newjul$julian[newjul$julian<0]+365
# create a sequential id
data<-data[order(data$date),]
data$seqid<-1:nrow(data)
#create unique location ids
### Create unique x,y combinations
#################################
xy<-as.factor(paste0(data$x,'_',data$y))
data$locid<-as.numeric(xy)
df1<-data.frame(xy=levels(xy))
df1$locid<-as.numeric(df1$xy)
df1$groupid<-df1$locid
df1$x<-sapply(strsplit(as.character(df1$xy),'_'),function(x)as.numeric(x[1]))
df1$y<-sapply(strsplit(as.character(df1$xy),'_'),function(x)as.numeric(x[2]))
f<-table(merge(raw.data[,c('long','lat','X')],df1[,c('x','y','locid')],by.x=c('long','lat'),by.y=c('x','y'),all.x=T)$locid)
f<-sort(f, decreasing=T)
df1<-merge(df1,data.frame(freq=c(f),locid=as.numeric(names(f))),by='locid',all.x=T)
library(Imap)
check.row<-nrow(df1)
dist.frame.full<-data.frame(first=rep(1:check.row,times=seq((check.row-1),0)),second=unlist(sapply(2:check.row,function(x) seq(x,check.row))))
nbigrow<-nrow(dist.frame.full)
dist.list<-list()
max.point<-10000000
i<-1
min.row<-(i-1)*max.point + 1
max.row<- i*max.point
if(max.row>nbigrow){max.row<-nbigrow}
dist.frame<-dist.frame.full[min.row:max.row,]
dist.frame[,c('x1','y1','id1')]<-merge(dist.frame[,'first',drop=F],df1[,c('locid','x','y')],by.x='first',by.y='locid',all.x=T)[,c('x','y','first')]
dist.frame[,c('x2','y2','id2')]<-merge(dist.frame[,'second',drop=F],df1[,c('locid','x','y')],by.x='second',by.y='locid',all.x=T)[,c('x','y','second')]
rm(dist.frame)
gc()
max.point<-1000000
i<-1
min.row<-(i-1)*max.point + 1
max.row<- i*max.point
if(max.row>nbigrow){max.row<-nbigrow}
dist.frame<-dist.frame.full[min.row:max.row,]
dist.frame[,c('x1','y1','id1')]<-merge(dist.frame[,'first',drop=F],df1[,c('locid','x','y')],by.x='first',by.y='locid',all.x=T)[,c('x','y','first')]
dist.frame[,c('x2','y2','id2')]<-merge(dist.frame[,'second',drop=F],df1[,c('locid','x','y')],by.x='second',by.y='locid',all.x=T)[,c('x','y','second')]
manage_cases()
library(vdiffr)
manage_cases()
library(vdiffr)
manage_cases()
setwd("C:/Users/birde/Dropbox/refnet/git/refnet")
library(vdiffr)
manage_cases()
collect_cases()
collect_cases()
manage_cases()
devtools::test()
collect_cases()
c<-"<?xml version='1.0' encoding='UTF-8' ?>
<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 720.00 576.00'>
<defs>
<style type='text/css'><![CDATA[
line, polyline, path, rect, circle {
fill: none;
stroke: #000000;
stroke-linecap: round;
stroke-linejoin: round;
stroke-miterlimit: 10.00;
}
]]></style>
</defs>
<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>
<rect x='0.00' y='0.00' width='720.00' height='576.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />
<defs>
<clipPath id='cpMzUuOTQ4fDcxNC41MjF8NTQxLjM5MXwyMy40NzY3'>
<rect x='35.95' y='23.48' width='678.57' height='517.91' />
</clipPath>
</defs>
<rect x='35.95' y='23.48' width='678.57' height='517.91' style='stroke-width: 1.07; stroke: none; fill: #FFFFFF;' clip-path='url(#cpMzUuOTQ4fDcxNC41MjF8NTQxLjM5MXwyMy40NzY3)' />
<circle cx='66.79' cy='517.85' r='1.95pt' style='stroke-width: 0.71; fill: #000000;' clip-path='url(#cpMzUuOTQ4fDcxNC41MjF8NTQxLjM5MXwyMy40NzY3)' />
<circle cx='683.68' cy='47.02' r='1.95pt' style='stroke-width: 0.71; fill: #000000;' clip-path='url(#cpMzUuOTQ4fDcxNC41MjF8NTQxLjM5MXwyMy40NzY3)' />
<circle cx='188.64' cy='405.43' r='1.95pt' style='stroke-width: 0.71; fill: #000000;' clip-path='url(#cpMzUuOTQ4fDcxNC41MjF8NTQxLjM5MXwyMy40NzY3)' />
<rect x='35.95' y='23.48' width='678.57' height='517.91' style='stroke-width: 1.07; stroke: #333333;' clip-path='url(#cpMzUuOTQ4fDcxNC41MjF8NTQxLjM5MXwyMy40NzY3)' />
<defs>
<clipPath id='cpMHw3MjB8NTc2fDA='>
<rect x='0.00' y='0.00' width='720.00' height='576.00' />
</clipPath>
</defs>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='21.01' y='520.94' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='10.01px' lengthAdjust='spacingAndGlyphs'>35</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='21.01' y='380.41' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='10.01px' lengthAdjust='spacingAndGlyphs'>40</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='21.01' y='239.88' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='10.01px' lengthAdjust='spacingAndGlyphs'>45</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='21.01' y='99.35' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='10.01px' lengthAdjust='spacingAndGlyphs'>50</text></g>
<polyline points='33.21,517.85 35.95,517.85 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='33.21,377.32 35.95,377.32 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='33.21,236.79 35.95,236.79 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='33.21,96.26 35.95,96.26 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='66.79,544.13 66.79,541.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='219.10,544.13 219.10,541.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='371.40,544.13 371.40,541.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='523.71,544.13 523.71,541.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='676.01,544.13 676.01,541.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='57.79' y='552.51' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='18.01px' lengthAdjust='spacingAndGlyphs'>-100</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='212.59' y='552.51' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='13.01px' lengthAdjust='spacingAndGlyphs'>-75</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='364.90' y='552.51' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='13.01px' lengthAdjust='spacingAndGlyphs'>-50</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='517.20' y='552.51' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='13.01px' lengthAdjust='spacingAndGlyphs'>-25</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='673.51' y='552.51' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='5.01px' lengthAdjust='spacingAndGlyphs'>0</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='367.89' y='568.04' style='font-size: 11.00px; font-family: Liberation Sans;' textLength='14.68px' lengthAdjust='spacingAndGlyphs'>lon</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text transform='translate(13.04,288.24) rotate(-90)' style='font-size: 11.00px; font-family: Liberation Sans;' textLength='11.62px' lengthAdjust='spacingAndGlyphs'>lat</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='35.95' y='14.42' style='font-size: 13.20px; font-family: Liberation Sans;' textLength='41.91px' lengthAdjust='spacingAndGlyphs'>testplot</text></g>
</svg>"
b<-"<?xml version='1.0' encoding='UTF-8' ?>
<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 720.00 576.00'>
<defs>
<style type='text/css'><![CDATA[
line, polyline, path, rect, circle {
fill: none;
stroke: #000000;
stroke-linecap: round;
stroke-linejoin: round;
stroke-miterlimit: 10.00;
}
]]></style>
</defs>
<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>
<rect x='0.00' y='0.00' width='720.00' height='576.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />
<defs>
<clipPath id='cpMzUuOTQ4fDcxNC41MjF8NTQxLjM5MXwyMy40NzY3'>
<rect x='35.95' y='23.48' width='678.57' height='517.91' />
</clipPath>
</defs>
<rect x='35.95' y='23.48' width='678.57' height='517.91' style='stroke-width: 1.07; stroke: none; fill: #FFFFFF;' clip-path='url(#cpMzUuOTQ4fDcxNC41MjF8NTQxLjM5MXwyMy40NzY3)' />
<circle cx='66.79' cy='517.85' r='1.95pt' style='stroke-width: 0.71; fill: #000000;' clip-path='url(#cpMzUuOTQ4fDcxNC41MjF8NTQxLjM5MXwyMy40NzY3)' />
<circle cx='683.68' cy='47.02' r='1.95pt' style='stroke-width: 0.71; fill: #000000;' clip-path='url(#cpMzUuOTQ4fDcxNC41MjF8NTQxLjM5MXwyMy40NzY3)' />
<circle cx='188.64' cy='405.43' r='1.95pt' style='stroke-width: 0.71; fill: #000000;' clip-path='url(#cpMzUuOTQ4fDcxNC41MjF8NTQxLjM5MXwyMy40NzY3)' />
<rect x='35.95' y='23.48' width='678.57' height='517.91' style='stroke-width: 1.07; stroke: #333333;' clip-path='url(#cpMzUuOTQ4fDcxNC41MjF8NTQxLjM5MXwyMy40NzY3)' />
<defs>
<clipPath id='cpMHw3MjB8NTc2fDA='>
<rect x='0.00' y='0.00' width='720.00' height='576.00' />
</clipPath>
</defs>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='21.01' y='520.94' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='10.01px' lengthAdjust='spacingAndGlyphs'>35</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='21.01' y='380.41' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='10.01px' lengthAdjust='spacingAndGlyphs'>40</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='21.01' y='239.88' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='10.01px' lengthAdjust='spacingAndGlyphs'>45</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='21.01' y='99.35' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='10.01px' lengthAdjust='spacingAndGlyphs'>50</text></g>
<polyline points='33.21,517.85 35.95,517.85 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='33.21,377.32 35.95,377.32 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='33.21,236.79 35.95,236.79 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='33.21,96.26 35.95,96.26 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='66.79,544.13 66.79,541.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='219.10,544.13 219.10,541.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='371.40,544.13 371.40,541.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='523.71,544.13 523.71,541.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<polyline points='676.01,544.13 676.01,541.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' clip-path='url(#cpMHw3MjB8NTc2fDA=)' />
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='57.79' y='552.51' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='18.01px' lengthAdjust='spacingAndGlyphs'>-100</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='212.59' y='552.51' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='13.01px' lengthAdjust='spacingAndGlyphs'>-75</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='364.90' y='552.51' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='13.01px' lengthAdjust='spacingAndGlyphs'>-50</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='517.20' y='552.51' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='13.01px' lengthAdjust='spacingAndGlyphs'>-25</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='673.51' y='552.51' style='font-size: 8.80px; fill: #4D4D4D; font-family: Liberation Sans;' textLength='5.01px' lengthAdjust='spacingAndGlyphs'>0</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='367.89' y='568.04' style='font-size: 11.00px; font-family: Liberation Sans;' textLength='14.68px' lengthAdjust='spacingAndGlyphs'>lon</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text transform='translate(13.04,288.24) rotate(-90)' style='font-size: 11.00px; font-family: Liberation Sans;' textLength='11.62px' lengthAdjust='spacingAndGlyphs'>lat</text></g>
<g clip-path='url(#cpMHw3MjB8NTc2fDA=)'><text x='35.95' y='14.42' style='font-size: 13.20px; font-family: Liberation Sans;' textLength='41.91px' lengthAdjust='spacingAndGlyphs'>testplot</text></g>
</svg>
"
b==c
read.table('file:///C:/Users/birde/Desktop/test1.txt')
read.csv('file:///C:/Users/birde/Desktop/test1.csv')
b<-read.csv('file:///C:/Users/birde/Desktop/test1.csv')
c<-read.csv('file:///C:/Users/birde/Desktop/test2.csv')
View(b)
View(c)
View(b)
b<-read.csv('file:///C:/Users/birde/Desktop/test1.csv')
c<-read.csv('file:///C:/Users/birde/Desktop/test2.csv')
b==c
b[1]
b[1,]
b[1,]==c[2,]
b[1,]==c[1,]
sapply(seq_len(b))
seq_len(b)
seq_along(b)
sapply(seq_along(b[,1]),function(x) b[x,]==c[x,])
collect_cases()
manage_cases()
delete_orphaned()
manage_orphaned
manage_orphaned()
vdiffr::expect_doppelganger('./refnet/tests/figs/',a,verbose=TRUE)
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE,path='./refnet/tests/figs/')
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE,path='./tests/figs/')
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE,path='./tests/figs/test-plot-addresses')
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE,path='./tests/figs/test-plot-addresses/testplot.svg')
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE)
#require(ggplot2)
df<-data.frame("authorID"=c(1,2,3),
"AU"= c('Smith, Jon J.','Thompson, Bob B.','Smith,J'),
"AF"= c('Smith, Jon J.','Thompson, Bob B.','Smith,J'),
"groupID"= c(3,2,3),
"match_name"=c('Smith,J',NA,'Smith, Jon J'),
"similarity"= c(0.8833333,NA,0.8833333),
"author_order"= c(1,2,1),
"address"=c("Univ Florida, Gainesville, FL USA",
"University of Texas, Austin, TX, USA",NA),
"RP_address"=c("Univ Florida, Gainesville, FL USA",
"University of Oxford, Oxfordshire, UK",
"University of California Berkley, Berkley, CA, USA"),
"RI"=NA,
"OI"=NA,
"EM"=c("j.smith@ufl.edu",NA,'jsmith@usgs.gov'),
"refID"=c(1,1,3),
"TA"=NA,
"SO"=NA,
"UT"=c('test1','test1','test2'),
"PT"=NA,
"PU"=NA,
"PY"=NA,
"university"=c('Univ Florida','University of Oxford',
"University of California"),
"country"=c('USA','United Kingdom',"USA"),
"state"=c('FL','Oxfordshire',"CA"),
"postal_code"=NA,
"city"=c('Gainesville','Oxford',"Berkley"),
"department"=NA ,
"lat"=c(35,51.7520,39),
"lon"=c(-100,1.2577,-80),
stringsAsFactors=FALSE )
a<-ggplot(df, aes(x=lon,y=lat)) +geom_point()
a
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE)
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE)
library(ggplot2)
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE)
manage_cases()
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE)
#require(ggplot2)
df<-data.frame("authorID"=c(1,2,3),
"AU"= c('Smith, Jon J.','Thompson, Bob B.','Smith,J'),
"AF"= c('Smith, Jon J.','Thompson, Bob B.','Smith,J'),
"groupID"= c(3,2,3),
"match_name"=c('Smith,J',NA,'Smith, Jon J'),
"similarity"= c(0.8833333,NA,0.8833333),
"author_order"= c(1,2,1),
"address"=c("Univ Florida, Gainesville, FL USA",
"University of Texas, Austin, TX, USA",NA),
"RP_address"=c("Univ Florida, Gainesville, FL USA",
"University of Oxford, Oxfordshire, UK",
"University of California Berkley, Berkley, CA, USA"),
"RI"=NA,
"OI"=NA,
"EM"=c("j.smith@ufl.edu",NA,'jsmith@usgs.gov'),
"refID"=c(1,1,3),
"TA"=NA,
"SO"=NA,
"UT"=c('test1','test1','test2'),
"PT"=NA,
"PU"=NA,
"PY"=NA,
"university"=c('Univ Florida','University of Oxford',
"University of California"),
"country"=c('USA','United Kingdom',"USA"),
"state"=c('FL','Oxfordshire',"CA"),
"postal_code"=NA,
"city"=c('Gainesville','Oxford',"Berkley"),
"department"=NA ,
"lat"=c(35,51.7520,39),
"lon"=c(-100,1.2577,-80),
stringsAsFactors=FALSE )
a<-ggplot(df, aes(x=lon,y=lat)) +geom_point()
a
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE)
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE)
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE,path='./tests/figs/test-plot-addresses/testplot.svg')
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE)
devtools::test()
collect_cases()
b<-a
vdiffr::expect_doppelganger("testplot",b,verbose=TRUE)
collect_cases()
manage_cases()
collect_cases()
vdiffr::expect_doppelganger("testplot",a,verbose=TRUE,path='/tests/figs/test-plot-addresses/testplot.svg')
vdiffr::expect_doppelganger("testplot",b,verbose=TRUE)
collect_cases()
manage_cases()
collect_cases()
collect_cases()
manage_cases()
collect_cases()
manage_cases()
devtools::test()
git status
devtools::test()
collect_cases()
vdiffr::expect_doppelganger("testplot.svg",b,verbose=TRUE)
vdiffr::expect_doppelganger("testplot",b,verbose=TRUE)
devtools::test()
