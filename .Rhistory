%in% c('jr','sr','senior','II','III','IV','V')]
middle <- gsub("[\\./,]", "", paste0(third.split, collapse = ""))
}
# Check if first and middle names are just initials
# and not seperated by period
if (length(second.split) > 0 && grepl("[A-Z][A-Z]", second.split)) {
middle <- substr(second.split, 2, nchar(second.split))[1]
}
return(c(first = first, middle = middle, last = last))
}
df1<-authors_clean(references)
backup <- final
final <- backup[substr(backup$AF,1,1)=='A',]
data <- final
df2<-df1$review
df3<-df1$prelim
View(df2)
View(df2)
library(refsplitr)
source('/home/matt/r_programs/refsplitr/R/authors_clean.R')
source('/home/matt/r_programs/refsplitr/R/authors_match.R')
source('/home/matt/r_programs/refsplitr/R/authors_address.R')
source('/home/matt/r_programs/refsplitr/R/authors_parse.R')
source('/home/matt/r_programs/refsplitr/R/split_names.R')
df1<-authors_clean(references)
df2<-df1$review
df3<-df1$prelim
View(df2)
final <- authors_parse(references)
address.df <- authors_address(final$address,final$authorID)
final <- merge(final, address.df[, c("university", "country", "state",
"postal_code", "city", "department", "adID")],
by.x = "authorID", by.y = "adID", all.x = TRUE)
##################################
# Now start Author Matching
##################################
final_backup<-final
novel.names <- authors_match(final)
View(novel.names)
novel.names[, c("ID", "groupID", "match_name",
"matchID","similarity","confidence","flagged")]
final <- merge(final, novel.names[, c("ID", "groupID", "match_name",
"matchID","similarity","confidence","flagged")],
by.x = "authorID", by.y = "ID", all.x = TRUE)
View(final)
final <- final[, c("authorID", "AU", "AF", "groupID", "match_name", "matchID"
"similarity","confidence","flagged" ,colnames(final)[!colnames(final) %in% c("authorID",
"AU", "AF", "groupID", "match_name", "similarity","confidence")])]
final <- final[, c("authorID", "AU", "AF", "groupID", "match_name", "matchID",
"similarity","confidence","flagged" ,colnames(final)[!colnames(final) %in% c("authorID",
"AU", "AF", "groupID", "match_name", "similarity","confidence")])]
sub.authors <- final[final$groupID %in% final$groupID[!is.na(final$similarity) | final$flagged==1],
c("authorID", "AU", "AF", "groupID", "match_name","matchID" ,"similarity","confidence",
"author_order", "university", "department", "postal_code",
"country", "address", "RP_address", "RI", "OI", "EM", "UT",
"refID", "PT", "PY", "PU")]
sub.authors <- sub.authors[order(sub.authors$groupID, sub.authors$similarity,
sub.authors$authorID), ]
View(sub.authors)
library(refsplitr)
source('/home/matt/r_programs/refsplitr/R/authors_clean.R')
source('/home/matt/r_programs/refsplitr/R/authors_match.R')
source('/home/matt/r_programs/refsplitr/R/authors_address.R')
source('/home/matt/r_programs/refsplitr/R/authors_parse.R')
source('/home/matt/r_programs/refsplitr/R/split_names.R')
#devtools::test('/home/matt/r_programs/refsplitr')
#setwd('/home/matt/Downloads/testing_refsplitr-master/data/WOS2018')
references<-references_read('/home/matt/Downloads/testing_refsplitr-master/data/BITR',dir=T)
df1<-authors_clean(references)
df2<-df1$review
df3<-df1$prelim
View(df2)
View(df2)
authors_refine
#' Refines the authors code output from authors_clean()
#'
#' \code{authors_refine} This function takes the author list output after the output has been synthesized for incorrect author matches. It contains a similarity score cutoff like read_authors. This however is to further constrain the list. New values ARE NOT created, instead it filters by the sim_score column in the output file. An output file is created using the 'root' argument that specifies the folder/file prefix for the output. The final file will be appended with '_final.csv'.
#'
#' @param review the `review` element from the list outputted by \code{authors_clean}
#' @param prelim the `prelim` element from the list outputted by \code{authors_clean}
#' @param  sim_score similarity score cut off point. Number between 0-1.
#' @export authors_refine
#'
authors_refine <- function(review, prelim, sim_score = NULL, confidence = NULL) {
if (length(review) == 0 || is.null(review) ||
nrow(review) == 0){
warning("Authors data.frame is empty.
This likely means there are no authors that need to be handchecked.
Outputting the prelim file.")
output <- prelim
return(output)
}
#If sim score was empty than we just default to lowest value
if (is.null(sim_score)) {
sim_score <- min(review$similarity, na.rm = TRUE)
}
if (is.null(confidence)) {
confidence <- 0
}
##########################################
review$groupID[!is.na(review$similarity) & review$similarity < sim_score &
!is.na(confidence) & review$confidence > confidence ] <-
review$authorID[!is.na(review$similarity) & review$similarity < sim_score &
!is.na(confidence) & review$confidence > confidence]
for (i in unique(review$authorID)) {
if (length(review$authorID[review$authorID == i]) > 1) {
error<-paste0("Author ID: ", i, " is duplicated please change in the author file and re run")
stop(error)
}
prelim$groupID[prelim$authorID == i] <- review$groupID[review$authorID == i]
}
for (p in unique(prelim$groupID)) {
prelim$AF[prelim$groupID == p] <-
prelim$AF[sort(prelim$authorID[prelim$groupID == p])[1]]
}
data1 <- prelim[, c("authorID", "groupID", "AF", "author_order",
"address", "university", "department", "postal_code", "city", "state",
"country", "RP_address", "RI", "OI", "UT", "refID", "PT", "PY", "PU")]
colnames(data1)[colnames(data1) == "AF"] <- "author_name"
return(data1)
}
source('/home/matt/r_programs/refsplitr/R/authors_refine.R')
source('/home/matt/r_programs/refsplitr/R/authors_refine.R')
authors_refine
what <- authors_refine(df2, df3, sim_score = 0.8, confidence = 3)
View(what)
devtools::install_github('embruna/refsplitr', force=T)
references<-references_read('/home/matt/Downloads/refnet_materials-master/data/Ecology.txt',dir=F)
df1<-authors_clean(references)
df2<-df1$review
df3<-df1$prelim
what <- authors_refine(df2, df3, sim_score = 0.8, confidence = 3)
View(what)
library(refsplitr)
references<-references_read('/home/matt/Downloads/refnet_materials-master/data/Ecology.txt',dir=F)
df1<-authors_clean(references)
df2<-df1$review
df3<-df1$prelim
what <- authors_refine(df2, df3, sim_score = 0.8, confidence = 3)
View(what)
View(df2)
#devtools::test('/home/matt/r_programs/refsplitr')
#setwd('/home/matt/Downloads/testing_refsplitr-master/data/WOS2018')
references<-references_read('/home/matt/Downloads/testing_refsplitr-master/data/BITR',dir=T)
df1<-authors_clean(references)
df2<-df1$review
df3<-df1$prelim
what <- authors_refine(df2, df3, sim_score = 0.8, confidence = 3)
View(what)
View(df2)
devtools::install_github('embruna/refsplitr', force=T)
install.packages("shiny")
install.packages("shiny")
devtools::install_github('embruna/refsplitr', force=T)
library(refsplitr)
references<-references_read('/home/matt/Downloads/refnet_materials-master/data/Ecology.txt',dir=F)
df1<-authors_clean(references)
df2<-df1$review
df3<-df1$prelim
what <- authors_refine(df2, df3, sim_score = 0.8, confidence = 3)
View(what)
#devtools::test('/home/matt/r_programs/refsplitr')
#setwd('/home/matt/Downloads/testing_refsplitr-master/data/WOS2018')
references<-references_read('/home/matt/Downloads/testing_refsplitr-master/data/BITR',dir=T)
df1<-authors_clean(references)
df2<-df1$review
df3<-df1$prelim
View(df2)
references<-references_read('/home/matt/Downloads/BITR_test.txt',dir=F)
references<-references_read('/home/matt/Downloads/BITR_test',dir=F)
references<-references_read('/home/matt/Downloads/BITR_test.txt',dir=F)
references<-references_read('/home/matt/Downloads/BITR_test.txt',dir=F)
references<-references_read('/home/matt/Downloads/BITR_test',dir=F)
references<-references_read('/home/matt/Downloads/testing_refsplitr-master/data/BITR/BITR_test.txt',dir=F)
references<-references_read('/home/matt/Downloads/BITR_test.txt',dir=F)
df1<-authors_clean(references)
df2<-df1$review
df3<-df1$prelim
View(df2)
View(df3)
what <- authors_refine(df2, df3, sim_score = 0.8, confidence = 3)
system.file("extdata", "BITR_test.txt", package = "refsplitr")
devtools::system.file("extdata", "BITR_test.txt", package = "refsplitr")
pkgload::system.file("extdata", "BITR_test.txt", package = "refsplitr")
system.file("extdata", "2012.csv", package = "testdat")
read.table(system.file("extdata", "BITR_test.txt", package = "refsplitr"))
references<-references_read(system.file("extdata", "BITR_test.txt", package = "refsplitr"),dir=F)
system.file("extdata", "BITR_test.txt", package = "refsplitr")
references<-references_read(system.file(BITR_test.txt", package = "refsplitr"),dir=F)
references<-references_read(system.file(BITR_test.txt, package = "refsplitr"),dir=F)
system.file('BITR_test.txt', package = "refsplitr")
references<-references_read(system.file('BITR_test.txt', package = "refsplitr"),dir=F)
install('/home/matt/r_programs/refsplitr')
devtools::install('/home/matt/r_programs/refsplitr')
devtools::document('/home/matt/r_programs/refsplitr')
install.packages("Hmisc")
devtools::document('/home/matt/r_programs/refsplitr')
library(devtools)
install.packages("devtools")
library(devtools)
devtools::document('/home/matt/r_programs/refsplitr')
devtools::install('/home/matt/r_programs/refsplitr')
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap",force=TRUE)
library(refsplitr)
references<-references_read('/home/matt/Downloads/refnet_materials-master/data/Ecology.txt',dir=F)
df1<-authors_clean(references)
df2<-df1$review
df3<-df1$prelim
what <- authors_refine(df2, df3, sim_score = 0.8, confidence = 3)
what_georef <- authors_georef(what)
devtools::install_local('/home/matt/r_programs/refsplitr')
library(devtools)
devtools::document('/home/matt/r_programs/refsplitr')
devtools::document('/home/matt/r_programs/refsplitr')
devtools::document('/home/matt/r_programs/refsplitr')
devtools::document('/home/matt/r_programs/refsplitr')
devtools::load_local('/home/matt/r_programs/refsplitr')
devtools::load_all('/home/matt/r_programs/refsplitr')
library("refsplitr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
devtools::load_all('/home/matt/r_programs/refsplitr')
references_read
references_read?
references_read()?
?references_Read
?references_read
devtools::document('/home/matt/r_programs/refsplitr')
devtools::test('/home/matt/r_programs/refsplitr')
system.file('extdata', 'BITR_test.txt', package = 'refsplitr')
rferences_read?
references_read?
?references_read
save
View(df3)
references<-references_read('/home/matt/Downloads/BITR_test.txt',dir=F)
View(references)
save(references, 'home/matt/Downloads/BITR')
saveRDS(references, 'home/matt/Downloads/BITR')
saveRDS(references, 'home/matt/Downloads')
saveRDS(references, '/home/matt/Downloads/BITR')
saveRDS(references, '/home/matt/Downloads/BITR.rds')
saveRDS(references, file = '/home/matt/Downloads/BITR.RData')
data(BITR)
load(BITR)
devtools::use_data(references, internal = TRUE)
usethis::use_data(references, internal = TRUE)
setwd('rprograms/refsplitr')
setwd('r_programs/refsplitr')
usethis::use_data(references, internal = TRUE)
usethis::use_data(references)
BITR<-references
usethis::use_data(BITR)
load(BITR)
load('BITR')
data()
data(BITR)
lll<-data(BITR)
lll
lll<-data('BITR')
devtools::document('/home/matt/r_programs/refsplitr')
devtools::load_all('/home/matt/r_programs/refsplitr')
?authors_refine
data(BITR)
authors <- authors_clean(BITR)
#'
refined <- authors_refine(authors$review, authors$prelim, 0.9, 5)
#'
georef_df <- authors_georef(refined)
View(georef_df)
View(georef_df[["not_missing_addresses"]])
use_data(BITR_geocode, internal = TRUE)
use_data('BITR_geocode', internal = TRUE)
BITR_geocdoe <- georef_df
use_data('BITR_geocode', internal = TRUE)
BITR_geocdoe <- georef_df$not_missing_addresses
use_data(BITR_geocode, internal = TRUE)
BITR_geocode <- georef_df$not_missing_addresses
use_data(BITR_geocode, internal = TRUE)
use_data(BITR_geocode, internal)
use_data(BITR_geocode)
use_data(BITR_geocode,overwrite=T)
data(BITR_geocode)
plot_addresses_country(BITR_geocode)
plot_addresses_country(BITR_geocode, 'USA')
getMap()$NAME
plot_addresses_country(BITR_geocode, 'North America')
rworldmap::getMap
rworldmap::getMap$NAME
rworldmap::getMap()$NAME
plot_addresses_country(BITR_geocode, mapRegion = 'United States')
rworldmap::getMap()$NAME
rworldmap::getMap()$NAME[167]
plot_addresses_country(BITR_geocode, mapRegion = rworldmap::getMap()$NAME[167])
rworldmap::getMap()$NAME
plot_addresses_country(BITR_geocode, mapRegion = United States)
plot_addresses_country(BITR_geocode, mapRegion = "United States")
plot_addresses_country(BITR_geocode, mapRegion = "United States of America")
plot_addresses_points(BITR_geocode, mapRegion = "United States of America")
plot_addresses_points(BITR_geocode)
mapRegion = "United States of America"
plot_addresses_points(BITR_geocode, mapRegion = "United States of America")
data <- BITR_geocode
mapRegion = 'North America'
## 	Remove any addresses that have NA values:
points <- data.frame(lat=as.numeric(as.character(data$lat)),
lon=as.numeric(as.character(data$lon)))
points <- points[!is.na(points$lat), ]
points <- points[!is.na(points$lon), ]
## 	Get the world map from rworldmap package:
world <- ggplot2::map_data("world")
world <- world[world$region != "Antarctica", ]
if (mapRegion != "world") {
world <- world[which(world$continent == mapRegion), ]
}
world$continent
## 	Get the world map from rworldmap package:
world <- ggplot2::map_data("world")
world <- world[world$region != "Antarctica", ]
world$continent
View(world)
ggplot2::map_data(mapRegion)
mapRegion
ggplot2::map_data('North America')
## 	Get the world map from rworldmap package:
world <- ggplot2::map_data("world")
world <- world[world$region != "Antarctica", ]
mapByRegion()
rworldmap::mapByRegion()
rworldmap::mapByRegion('North America')
## 	Get the world map from rworldmap package:
world <- ggplot2::map_data("world")
world <- world[world$region != "Antarctica", ]
ggplot2::map_data()
map_data()
## 	Get the world map from rworldmap package:
world <- ggplot2::map_data("world")
world <- world[world$region != "Antarctica", ]
if (mapRegion != "world") {
world <- world[which(world$region == mapRegion), ]
}
## 	Get the world map from rworldmap package:
world <- ggplot2::map_data("world")
world <- world[world$region != "Antarctica", ]
mapRegion = 'USA'
if (mapRegion != "world") {
world <- world[which(world$region == mapRegion), ]
}
load("/home/matt/r_programs/refsplitr/data/countries.rda")
cpuntries
countries
ggplot2::ggplot() +
ggplot2::geom_map(
data = world, map = world,
ggplot2::aes_string(map_id = "region"),
color = "gray", fill = "#7f7f7f", size = 0.05, alpha = 1 / 4
) +
ggplot2::geom_point(data = points, ggplot2::aes_string(x = "lon",
y = "lat")) +
ggplot2::coord_map(ylim=c(-60,80), xlim=c(-185, 185))+
ggplot2::ylab("latitude") +
ggplot2::xlab("longitude") +
ggplot2::theme_bw() +
ggplot2::theme(
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
axis.text=ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank()
)
## Filter by country
data <- data[, data$country == mapCountry]
mapCountry <- 'USA'
## Filter by country
data <- data[, data$country == mapCountry]
## 	Remove any addresses that have NA values:
points <- data.frame(lat=as.numeric(as.character(data$lat)),
lon=as.numeric(as.character(data$lon)))
points <- points[!is.na(points$lat), ]
points <- points[!is.na(points$lon), ]
## 	Get the world map from rworldmap package:
world <- ggplot2::map_data("world")
world <- world[world$region != "Antarctica", ]
if (mapRegion != "world") {
world <- world[which(world$region == mapRegion), ]
}
ggplot2::ggplot() +
ggplot2::geom_map(
data = world, map = world,
ggplot2::aes_string(map_id = "region"),
color = "gray", fill = "#7f7f7f", size = 0.05, alpha = 1 / 4
) +
ggplot2::geom_point(data = points, ggplot2::aes_string(x = "lon",
y = "lat")) +
ggplot2::coord_map(ylim=c(-60,80), xlim=c(-185, 185))+
ggplot2::ylab("latitude") +
ggplot2::xlab("longitude") +
ggplot2::theme_bw() +
ggplot2::theme(
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
axis.text=ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank()
)
data <- BITR_geocode
## Filter by country
data <- data[, data$country == mapCountry]
data <- BITR_geocode
## Filter by country
data <- data[, data$country == tolower(mapCountry)]
mapCountry
tolower(mapCountry)
data$country
## Filter by country
data <- data[data$country == tolower(mapCountry), ]
## 	Remove any addresses that have NA values:
points <- data.frame(lat=as.numeric(as.character(data$lat)),
lon=as.numeric(as.character(data$lon)))
points <- points[!is.na(points$lat), ]
points <- points[!is.na(points$lon), ]
## 	Get the world map from rworldmap package:
world <- ggplot2::map_data("world")
world <- world[world$region != "Antarctica", ]
if (mapRegion != "world") {
world <- world[which(world$region == mapRegion), ]
}
ggplot2::ggplot() +
ggplot2::geom_map(
data = world, map = world,
ggplot2::aes_string(map_id = "region"),
color = "gray", fill = "#7f7f7f", size = 0.05, alpha = 1 / 4
) +
ggplot2::geom_point(data = points, ggplot2::aes_string(x = "lon",
y = "lat")) +
ggplot2::coord_map(ylim=c(-60,80), xlim=c(-185, 185))+
ggplot2::ylab("latitude") +
ggplot2::xlab("longitude") +
ggplot2::theme_bw() +
ggplot2::theme(
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
axis.text=ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank()
)
world <- world[which(world$region == mapCountry), ]
world <- world[which(world$region == mapCountry), ]
ggplot2::ggplot() +
ggplot2::geom_map(
data = world, map = world,
ggplot2::aes_string(map_id = "region"),
color = "gray", fill = "#7f7f7f", size = 0.05, alpha = 1 / 4
) +
ggplot2::geom_point(data = points, ggplot2::aes_string(x = "lon",
y = "lat")) +
ggplot2::coord_map(ylim=c(-60,80), xlim=c(-185, 185))+
ggplot2::ylab("latitude") +
ggplot2::xlab("longitude") +
ggplot2::theme_bw() +
ggplot2::theme(
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
axis.text=ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank()
)
mapCountry
world$region
which(world$region == mapCountry)
View(world)
ggplot2::ggplot() +
ggplot2::geom_map(
data = world, map = world,
ggplot2::aes_string(map_id = "region"),
color = "gray", fill = "#7f7f7f", size = 0.05, alpha = 1 / 4
) +
ggplot2::geom_point(data = points, ggplot2::aes_string(x = "lon",
y = "lat")) +
#ggplot2::coord_map(ylim=c(-60,80), xlim=c(-185, 185))+
ggplot2::ylab("latitude") +
ggplot2::xlab("longitude") +
ggplot2::theme_bw() +
ggplot2::theme(
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
axis.text=ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank()
)
world
min(world$lat)
max(world$lat)
ggplot2::ggplot() +
ggplot2::geom_map(
data = world, map = world,
ggplot2::aes_string(map_id = "region"),
color = "gray", fill = "#7f7f7f", size = 0.05, alpha = 1 / 4
) +
ggplot2::geom_point(data = points, ggplot2::aes_string(x = "lon",
y = "lat")) +
ggplot2::coord_map(ylim=c(min(world$lat), max(world$lat)),
xlim=c(min(world$long), max(world$long)))+
ggplot2::ylab("latitude") +
ggplot2::xlab("longitude") +
ggplot2::theme_bw() +
ggplot2::theme(
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
axis.text=ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank()
)
max(world$lat)
c(min(world$lat)
min(world$long)
min(world$long)
max(world$long))
max(world$long)
